/* ng-infinite-scroll - v1.0.0 - 2013-02-23 */
var mod;

mod = angular.module('infinite-scroll', []);

mod.directive('infiniteScroll', [
  '$rootScope', '$timeout', function($rootScope, $timeout) {
    return {
      link: function(scope, elem, attrs) {

        var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
        scrollDistance = 0;
        if (attrs.infiniteScrollDistance != null) {
          scope.$watch(attrs.infiniteScrollDistance, function(value) {
            return scrollDistance = parseInt(value, 10);
          });
        }
        scrollEnabled = true;
        checkWhenEnabled = false;

        scope.$watch('data', function(value) {
            window.setTimeout(function() {
                if (!scope.autoScrollingFromBottom) {
                    elem.prop("scrollTop", elem.prop("scrollHeight") - elem.prop("clientHeight"));
                } else {
                    elem.prop("scrollTop", elem.prop("scrollHeight") - elem.prop("clientHeight") - scope.autoScrollingFromBottom - 50);
                    scope.autoScrollingFromBottom = 0;
                }
            }, 50);

        });

        if (attrs.infiniteScrollDisabled != null) {
          scope.$watch(attrs.infiniteScrollDisabled, function(value) {
            scrollEnabled = !value;
            if (scrollEnabled && checkWhenEnabled) {
              checkWhenEnabled = false;
              return handler();
            }
          });
        }
        handler = function() {
          var elementTop = elem.prop("scrollTop");
          shouldScroll = elementTop <= 50;
          if (shouldScroll && scrollEnabled) {
            scrollEnabled = false;
            window.setTimeout(function() {
                scrollEnabled = true;
            }, 800);
            scope.autoScrollingFromBottom = elem.prop("scrollHeight") - elem.prop("clientHeight") - elem.prop("scrollTop");
            if ($rootScope.$$phase) {
              return scope.$eval(attrs.infiniteScroll);
            } else {
              return scope.$apply(attrs.infiniteScroll);
            }
          } else if (shouldScroll) {
            return checkWhenEnabled = true;
          }
        };
        elem.on('scroll', handler);
        scope.$on('$destroy', function() {
          return elem.off('scroll', handler);
        });
        return $timeout((function() {
          if (attrs.infiniteScrollImmediateCheck) {
            if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
              return handler();
            }
          } else {
            return handler();
          }
        }), 0);
      }
    };
  }
]);